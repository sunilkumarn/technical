<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Scribblings]]></title>
  <link href="http://tech.sunilnkumar.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tech.sunilnkumar.com/"/>
  <updated>2014-02-06T19:19:43+05:30</updated>
  <id>http://tech.sunilnkumar.com/</id>
  <author>
    <name><![CDATA[Sunil Kumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python DB-API]]></title>
    <link href="http://tech.sunilnkumar.com/2010/10/18/python-db-api"/>
    <updated>2010-10-18T23:53:31+05:30</updated>
    <id>http://tech.sunilnkumar.com/2010/10/18/python-db-api</id>
    <content type="html"><![CDATA[<p>Python is one of the more popular Open Source programming languages, owing largely to its own native expressiveness as well as to the variety of support modules that are available to extend its capabilities. One of these modules is DB-API, which, as the name implies, provides a database application programming interface. We will have a discussion about how to connect and use a General purpose database system like Mysql with Python. The DB API provides a minimal standard for working with databases, using Python structures and syntax wherever possible .</p>

<p>4 Steps of the Python DB-API includes the following:</p>

<p>1) Importing the API module.</p>

<p>2) Acquiring a connection with the database.</p>

<p>3) Issuing SQL statements and stored procedures.</p>

<p>4) Closing the connection
There are lots of database systems that are available .Here we use Mysql as our database system .You could also use database systems like PostgreSQL, SQL Server etc. Python&rsquo;s DB-API uses a two-level architecture in which the top level provides an abstract interface that is similar for all supported database engines, and a lower level consisting of drivers for specific engines that handle engine-dependent details. This means, of course, that to use DB-API for writing Python scripts, you must have a driver for your particular database system. Since we have  fixed our database system as MySQL, DB-API provides database access by means of the MySQLdb driver . Therefore we need a module <strong>MySQLdb</strong> in Python &lsquo;&rsquo; .</p>

<p>At first , we need to get Mysql installed in our system.</p>

<p><strong>$: apt-get install mysql-server-5.0</strong></p>

<p>Just try and enter into the interactive prompt of mysql .</p>

<p><strong> $: mysql -u &lsquo;user&rsquo; -p</strong></p>

<p>You will get your mysql interactive prompt where you could just brush up your sql knowledge.</p>

<p><em><strong>Step 1) Importing the API module.</strong></em></p>

<p>You need to make sure that you that have MySQLdb installed on your machine.</p>

<p>Do this:</p>

<p><strong>$: python</strong></p>

<p><strong>>>>import MySQLdb</strong></p>

<p>Obviously if you dont have it installed , you would be getting this :</p>

<p><strong>Traceback (most recent call last):</strong></p>

<p><strong>File &ldquo;<stdin>&rdquo;, line 1, in <module></strong></p>

<p><strong>ImportError: No module named MySQLdb</strong></p>

<p>To install MySQLdb module, download it from <a href="http://sourceforge.net/projects/mysql-python">MySQLdb Download</a> page and proceed as follows:</p>

<pre><code>$ gunzip MySQL-python-1.2.2.tar.gz
$ tar -xvf MySQL-python-1.2.2.tar
$ cd MySQL-python-1.2.2
$ python setup.py build
$ python setup.py install
</code></pre>

<p>Now do</p>

<p><strong>$ : python</strong></p>

<p><strong>>>>import MySQLdb</strong></p>

<p><strong>>>></strong></p>

<p>We have done with Step 1) out of the 4 steps of the Python DB-API .</p>

<p>Now we move into step 2). The prerequisite for performing step 2) of the DB-API is that you need to create a database ( &lsquo;Persons&rsquo; in our examples to follow ) in mysql .</p>

<p>You could do this by :</p>

<p><strong>$: mysql -u &lsquo;user&rsquo; -p</strong></p>

<p>Enter  mysql .</p>

<p>Do :</p>

<p><strong>mysql>CREATE DATABASE Persons;</strong></p>

<p><strong>mysql>Query OK, 1 row affected (0.03 sec)</strong></p>

<p>Once you have done with this</p>

<p><em><strong>Step 2 ) Acquiring a connection with the database.</strong></em></p>

<p><em>conn = MySQLdb.connect (host = &ldquo;localhost&rdquo;,</em></p>

<p><em>user = &ldquo;user&rdquo;,</em></p>

<p><em>passwd = &ldquo;asdfgh&rdquo;,</em></p>

<p><em>db = &ldquo;Persons&rdquo;)</em></p>

<p>Here we open a database connection using the &lsquo;connect&rsquo; function of the MySQLdb module.</p>

<p>The four parameters that are passed to the function &lsquo;connect&rsquo;  are :</p>

<p><strong>host</strong> &mdash;       the system in which the database is created</p>

<p><strong>user</strong> &mdash;       the user who is trying to acquire a connection with the database ( the user must be authenticated with mysql if the attempt to create a connection needs to be successful.</p>

<p><strong>passwd</strong> &mdash;      the password of the mysql database system .</p>

<p><strong>db</strong> &mdash;      the name of the database created using mysql  .</p>

<p>If the &lsquo;connect()&rsquo; call succeeds, it returns a connection object that serves as the basis for further interaction with MySQL( here &lsquo;conn&rsquo;). If the call fails, it raises an exception .Therefore you better perform exception handling so that you get to know more about the root cause of the error.</p>

<p><em>try:</em></p>

<p><em>conn = MySQLdb.connect (host = &ldquo;localhost&rdquo;,</em></p>

<p><em>user = &ldquo;root&rdquo;,</em></p>

<p><em>passwd = &ldquo;asdfgh&rdquo;,</em></p>

<p><em>db = &ldquo;Persons&rdquo;)</em></p>

<p><em>except MySQLdb.Error,e:</em></p>

<p><em>print &ldquo;Error occured &rdquo;,e.args[0],e.args[1]</em></p>

<p><em>sys.exit (1)</em></p>

<p>_
_</p>

<p>Here on an unsuccessful attempt to make a connection , an exception is raised ( MySQLdb.Error ) , the information about the error is stored in e.args[1] .</p>

<p><em><strong>Step 3) Issuing SQL statements and stored procedures.</strong></em></p>

<p>Now we need to create a cursor object for the connection between Python and mysql so that all the functions performed by sql are performed within from Python now . We create a cursor object using the &lsquo; cursor()&rsquo; method .</p>

<p>We are all set to execute sql statements in an Object oriented environment , and thats using the &lsquo;execute()&rsquo; function . Any sql statement can be called in from Python using the &lsquo;execute()&rsquo; function.</p>

<p>Consider you want to create a new table in our database &lsquo;Persons&rsquo; .</p>

<p><em>cursor.execute(&ldquo;&rdquo;&ldquo;</em></p>

<p><em>CREATE TABLE PERSON</em></p>

<p><em>(</em></p>

<p><em>ID               int,</em></p>

<p><em>lastname     CHAR(40),</em></p>

<p><em>firstname    CHAR(40),</em></p>

<p><em>City      CHAR(40)</em></p>

<p><em>)</em></p>

<p><em>&ldquo;&rdquo;&ldquo;)</em></p>

<p>You have created a table named &lsquo;PERSON &rsquo; with fields as mentioned above .</p>

<p>As you would imagine , any other statements could be performed as such , for eg.</p>

<p><em>cursor.execute (&ldquo;&rdquo;&ldquo;</em></p>

<p><em>INSERT INTO PERSON (ID, lastname,firstname,City)</em></p>

<p><em>VALUES</em></p>

<p><em>(1,&lsquo;KUMAR&rsquo;,&lsquo;SUNIL&rsquo;,&lsquo;KANNUR&rsquo;),</em></p>

<p><em>(2,&lsquo;JOHN&rsquo;,&lsquo;HARI&rsquo;,&lsquo;KOTTAYAM&rsquo;)</em></p>

<p><em>&ldquo;&rdquo;&ldquo;)</em></p>

<p>or</p>

<p><em>cursor.execute (&ldquo;SELECT * FROM PERSON WHERE City like &lsquo;K%&rsquo;&rdquo;)</em></p>

<p>and any of the sql statements .</p>

<p><em><strong> Step 4) Closing the connection</strong></em></p>

<p><em>conn.close()</em></p>

<p>Here we have terminated the connection after all our need with the DB-API has been done with . The DB-API allows us to update , insert , retrieve and modify within a database in a simple and elegant way .</p>

<p>We have tried and demonstrated a simple example of how to use the Python DB-API .</p>

<p>Using Python with Sql,we have found an object-relational mapping where the object-oriented programming paradigm of Python meets the relational paradigm of Sql. An object-relational mapping is a bridge between the two worlds. As we saw , it lets us define classes that correspond to the tables of a database. Later , we use methods on those classes and their instances to interact with the database .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluation of Scheme in Python]]></title>
    <link href="http://tech.sunilnkumar.com/2010/09/25/evaluation-of-scheme-in-python"/>
    <updated>2010-09-25T19:13:22+05:30</updated>
    <id>http://tech.sunilnkumar.com/2010/09/25/evaluation-of-scheme-in-python</id>
    <content type="html"><![CDATA[<p>Those who have ever gone through the SICP ( Structure and interpretation of computer programs) , would have come across the implementation of a Metacircular evaluator ( an evaluator written in a language that it evaluates) for scheme in the 4rth Chapter.
<a href="http://sunilkumarn.files.wordpress.com/2010/09/cover.jpg"><img src="http://sunilkumarn.files.wordpress.com/2010/09/cover.jpg?w=207" alt="" /></a></p>

<p>Motivated by that , and drawing ideas from the <strong>wizard book</strong> , an evaluator for Scheme is created in Python, so that Scheme statements evaluated in Python.</p>

<p>The creation of a metacircular evaluator for scheme contains prominently of two steps:</p>

<pre><code>     1)  Eval:   To evaluate a combination (a compound expression other than a special form), evaluate the subexpressions and then apply the value of the operator subexpression to the values of the operand subexpressions. 
    2)  Apply :  To apply a compound procedure to a set of arguments, evaluate the body of the procedure in a new environment. 
</code></pre>

<p><a href="http://sunilkumarn.files.wordpress.com/2010/09/image-02.png"><img src="http://sunilkumarn.files.wordpress.com/2010/09/image-02.png?w=300" alt="" /></a></p>

<p><em><strong>Implementation of the Evaluator in Python:</strong></em></p>

<p>Before getting into the creation and implementation details of the evaluator , please read <a href="http://sunilkumarn.wordpress.com/2010/09/25/concept-and-creation-of-environment/">this</a>.
Now that you have got an idea about the concepts of environment , lets get into further details of creation of the evaluator.</p>

<p>The first process is basically to parse the user Input and use it in a way so as to evaluate it. After parsing ,the user input is provided to the function gravity().This particular function performs the task of classifying the user input and route them to appropriate functions. This is similar to &lsquo;eval&rsquo; in the scheme metacircular evaluator implemented in SICP.
According to the user input , the appropriate functions are performed.
Different functions implemented in the evaluator.</p>

<p><strong>evaluate():</strong>
This function could be compared with the &lsquo;apply&rsquo; procedure implemented in SICP. The function checks for different operator and its corresponding operands. The operator is applied to the operands and the result returned.</p>

<p><strong>opdet():</strong>
The function is called from &lsquo;evaluate()&rsquo; , it takes in a list and returns the operator that has to be applied to the operands.</p>

<p><a href="http://sunilkumarn.files.wordpress.com/2010/09/evaluate.png"><img src="http://sunilkumarn.files.wordpress.com/2010/09/evaluate.png?w=300" alt="" /></a></p>

<p>If a simple expression is provided just to perform basic arithmetic and logical operations , only these two functions are invoked after the gravity () function and we obtain the result. The situation, as is obvious would be a little different when relatively complex tasks are give ( such a processing of an &lsquo;if&rsquo; statement , a function , an assignment operation, a recursive function and so on.</p>

<p>Processing of an &lsquo;if&rsquo; statement involves invoking many more functions.</p>

<p><strong>if_begin_eval():</strong>
This function involves the presence of any variables involved in the &lsquo;if&rsquo; statement and fetches the value of such variables from the environment.</p>

<p><strong>if_eval() :</strong>
This particular function is used to evaluate the &lsquo;predicate &rsquo; of the &lsquo;if&rsquo; statement and returns the result of the &lsquo;if&rsquo; statement. The function invokes the &lsquo;evaluate()&rsquo; function and would process the entire &lsquo;if&rsquo; statement according to the value returned by &lsquo;evaluate()&rsquo; .
If a simple &lsquo;if&rsquo; statement'
( if ( > 4 5 ) 4 5 ) is inputted:
if_eval() would pass the predicate part ( >  4 5 ) to &lsquo;evaluate()&rsquo; and process the if statement according to the returned value. Here the value returned by &lsquo;evaluate()&rsquo; would be 0, since the condition ( 4 > 5 ) is not true. The value returned by the &lsquo;if_eval()&rsquo; would be 5.</p>

<p><strong>if_cons_alt(): </strong>
The function evaluates the consequent and alternative of the &lsquo;if&rsquo; condition'. A separate function for the process would be specially helpful when the if statement consists of larger expressions and values.
The function would return back a 2 element list of the final values obtained after evaluation of the consequent and alternative.</p>

<p><a href="http://sunilkumarn.files.wordpress.com/2010/09/if.png"><img src="http://sunilkumarn.files.wordpress.com/2010/09/if.png?w=300" alt="" /></a></p>

<p>Evaluation of procedures would take us through a different path. We need functions that can extract, evaluate and execute a function. We also need a function to test whether the inputted procedure is recursive or non-recursive.</p>

<p><strong>exec_call():</strong>
Checks whether the function is a simple function of the sort :
( define ( lambda ( square ( x ) ( * x  x ) ) )  non-recursive
or of the sort:
( define ( lambda ( fact ( x ) ( if ( = x 1 ) 1 ( * x fac ( &ndash; x 1 ) ) ) ) ) )   recursive :
executes the procedure if non-recursive.</p>

<p><strong>extract_funcbody():</strong>
extracts the body of the function. Passes the body of the function to evaluate_funcbody .</p>

<p><strong>evaluate_funcbody():</strong>
Fetches the value of the variables in the function body and returns back the function body to extract_funcbody(). This function is invoked only when the procedure is non-recursive.</p>

<p><strong>exec_func_body():</strong>
Fetch the value of the variables in the function body . This function is invoked only when the inputted procedure is recursive.</p>

<p><a href="http://sunilkumarn.files.wordpress.com/2010/09/func1.png"><img src="http://sunilkumarn.files.wordpress.com/2010/09/func1.png" alt="" /></a></p>

<p><strong><em>Use of the module ops().</em></strong>
You would see a module named &lsquo; ops&rsquo; being imported. This module consists of certain functions that can be performed on lists. The module is imported so as to get a feel of the way programming is done in scheme , any operation on lists can be performed on lists using 5 basic functions. The attempt has been made to stick to the combination of these basic operations rather than using the full functionality of Python.</p>

<p>The source code of the project can be obtained <a href="http://github.com/sunilkumarn/MetacircularEvaluator">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concept and creation of Environment ]]></title>
    <link href="http://tech.sunilnkumar.com/2010/09/25/concept-and-creation-of-environment"/>
    <updated>2010-09-25T19:07:05+05:30</updated>
    <id>http://tech.sunilnkumar.com/2010/09/25/concept-and-creation-of-environment</id>
    <content type="html"><![CDATA[<p>One of the most important thing you need to grasp while doing a project on interpreters and evaluator is the idea of an environment. Within the program the environment is a collection of the names(whether variables or functions) and its corresponding values. While using such names you will need an environment where you can store the value of those names so that you could fetch it for further use. While implementing the evaluator for scheme in python , the concept of environment was implemented using <strong>associative arrays</strong> in python. 3 dictionaries were used to implement the concept of environment. Lets go through a bit of details on the creation and use of environments.</p>

<p>Consider writing the scheme statements:</p>

<p>scheme>>>( define n 7 )
scheme>>>( define s 6 )
scheme>>>( if ( > n s ) n s )</p>

<p>In our &lsquo;if&rsquo; statement we have not specified the exact value , but instead we have used variables. The question comes then that from where do we retrieve the values of those variables.
The answer is simple: &lsquo;Here the variables are global variables and are accessible from anywhere within the program&rsquo;. Hence we need create a dictionary which consists of &lsquo;n&rsquo; and &rsquo;s' as its keys and their values as the values of the dictionary. This dictionary is created when the statement &lsquo;define ( not followed by a  parenthesis) is inputted.</p>

<p>1)<strong>dict</strong>={&rsquo;s':&lsquo;7&rsquo;,&lsquo;n&rsquo;:&lsquo;6&rsquo;}</p>

<p>Obviously we cannot use this dictionary for all our purpose. We also need a dictionary where we could store variables and values that are local to a function. We have created another dictionary for this very purpose .</p>

<p>Consider the following:
scheme>>>( define ( sq ( lambda ( x ) ( * x x ) ) )       &mdash;&mdash;&ndash;>      statement 1
scheme>>>( sq 4 )                       &mdash;&mdash;&ndash;>     statement 2</p>

<p>When the second statement is executed ,a dictionary &lsquo;local_dict&rsquo; is created where this value 4 is associated with the variable &lsquo;x&rsquo;.</p>

<p>2)<strong>local_dict</strong>={&lsquo;x&rsquo;:&lsquo;4&rsquo;}</p>

<p>We use the 3rd dictionary for associating a function with its body. When the &lsquo;statement 1&rsquo; above is inputted , a dictionary &lsquo;func_dict&rsquo; is created which contains the &lsquo;function name&rsquo; as its key and the &lsquo;body&rsquo; as its value.</p>

<p>3)<strong>func_dict</strong>={&lsquo;sq&rsquo;,&lsquo;(  lambda ( x ) ( * x x ) )&rsquo; }</p>

<p>We have functions &lsquo;<strong>create_env ()&rsquo;</strong> and <strong>&lsquo;create_localenv()</strong>&rsquo; for creating the first and third dictionaries that we have mentioned above. The second dictionary is created within the function <strong>&lsquo;exec_call()</strong>&rsquo; where the processing of each function is started. Hence its appropriate to create the dictionary needed only for the local use of that function within exec_call().</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash  your python Virtual machine!!!]]></title>
    <link href="http://tech.sunilnkumar.com/2010/09/15/crash-your-python-virtual-machine"/>
    <updated>2010-09-15T09:02:22+05:30</updated>
    <id>http://tech.sunilnkumar.com/2010/09/15/crash-your-python-virtual-machine</id>
    <content type="html"><![CDATA[<p>Causing a python virtual machine to crash is not what I intended but it just happened so. But since this happened , I would just like to give an explanation about what happened and the reason for it.</p>

<p>While trying out <a href="http://sunilkumarn.wordpress.com/2010/09/15/memoizationrun-your-programs-faster/">memoization</a> , I tried to increase the maximum recursion limit which was set to 1000 in my system.
To change your maximum recursion limit , what you need to do is :
<em>import sys
sys.setrecursionlimit( MY LIMIT )</em></p>

<p>This would change the maximum number of times that you could recurse your code segment.
Everything worked fine until I did this:
<em>sys.setrecursionlimit(46765)</em></p>

<p>Now my recursion limit is set to 46765. I tried to run my python code which displayed a segmentation fault that you wouldn&rsquo;t normally associate with your python code. This tells you that your python virtual machine has crashed.
Lets try and find out the reason behind that:</p>

<p>Recursion consumes the stack size in the system . Setting the recursion limit to 46765 means that now the amount of stacksize that will be consumed is much greater .We know the fact the python virtual machine is written in C . As you increase your recursion limit , a point reaches where there is not enough memory for the C back end to execute our python code and this results in a segmentation fault in C that is back propagated to python and displayed in our terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memoization:Run your programs faster.]]></title>
    <link href="http://tech.sunilnkumar.com/2010/09/15/memoizationrun-your-programs-faster"/>
    <updated>2010-09-15T09:00:50+05:30</updated>
    <id>http://tech.sunilnkumar.com/2010/09/15/memoizationrun-your-programs-faster</id>
    <content type="html"><![CDATA[<p><strong>Memoization is an optimization technique to speed up programs</strong> . Here the function calls are not required to make repetitive calculations of previously calculated results. The processing time of the program is reduced and the memory consumed is increased. <strong>Memoized functions become optimized for speed while they use a higher memory .</strong></p>

<p>Lets go through an analysis of memoization: Consider the code segment for finding out the term of  a fibonacci series:</p>

<p>_def fib(n):</p>

<pre><code>if n==0:

        return 0

if n==1:

    return 1

else:

    n=fib(n-1)+fib(n-2)

    return n
</code></pre>

<p>_</p>

<p>You could find out the time taken to run the code :
<strong>$ time python filename.py
</strong></p>

<p>You would find out then that the time complexity of your program is O(exp(n)) . Try and find out the 40th term of the fibonacci series . This code segment will make you wait for a considerable amount of time before you view your result in the terminal. Trying to find out the 50th term would cause you to manually interrupt the process because you can not wait any longer. Therefore we need a method whereby we could find out the higher terms of the series in much faster time.</p>

<p>Heres exactly where memoization comes in. Memoization is not any kind of magic. What it does is that is caches the results that have been calculated earlier and stores them in a lookup table so that these don&rsquo;t have to be calculated again. We make use of an associative array as a lookup table here.  The following code segment shows the memoized version.</p>

<p>_table={0:0,1:1}</p>

<p>def fib1(n):</p>

<pre><code>if not n in table:

    table[n]=fib1(n-1)+fib1(n-2)

return table[n]
</code></pre>

<p>_</p>

<p>Here we create an associative array with the first two numbers of the fibonacci series as its keys. Now
upon the call of each function , the lookup table (&lsquo;table&rsquo;) is checked for the existence of the term . If the term is not present in the associative array , the term is calculated and stored in the associative array. In both cases the resulting term is returned. Now see for yourself , the pace of the results being processed.
Try find out the 100th term of the series:
Do
<strong>$ time python myfilename.py</strong>
You would see the 100th term of the fibonacci series in 12/1000th of a second.Try them for the 1000th,10000th terms&hellip;(provided that you have a higher recursion limit). Did you ever think  that it could be this faster.???</p>
]]></content>
  </entry>
  
</feed>
