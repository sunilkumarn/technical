<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Scribblings]]></title>
  <link href="http://tech.sunilnkumar.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tech.sunilnkumar.com/"/>
  <updated>2014-08-22T14:55:50+05:30</updated>
  <id>http://tech.sunilnkumar.com/</id>
  <author>
    <name><![CDATA[Sunil Kumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tree hierarchy with Js-tree and ancestry]]></title>
    <link href="http://tech.sunilnkumar.com/2014/03/28/tree-hierarchy-with-js-tree-and-ancestry"/>
    <updated>2014-03-28T21:24:00+05:30</updated>
    <id>http://tech.sunilnkumar.com/2014/03/28/tree-hierarchy-with-js-tree-and-ancestry</id>
    <content type="html"><![CDATA[<p>Recently ended up reading one of my old codes where I had implemented a tree structure using the <a href="https://github.com/tristanm/jstree-rails">Js-tree</a> jquery library. Hadn&rsquo;t tried out the <a href="https://github.com/stefankroes/ancestry">ancestry</a> gem then. Decided to create such a tree structure using ancestry. Though it ended up pretty fast and simple, it for sure doesnt look as pretty as the one made with the js-tree library. Hence, decided to try out a combo of both and using old school recursion it worked out pretty well.</p>

<p>To get it working, assume you have a categories models with the has_ancestry method.</p>

<pre><code>Category.arrange_serializable.to_json
=&gt; [
        {
            "ancestry" =&gt; nil, "id" =&gt; 1, name: "OS",  "children" =&gt; [
                { "ancestry" =&gt; "1", "id" =&gt; 2, name: "Linux" "children" =&gt; [] }
            ]
        }
    ]
</code></pre>

<p>Now since we use the js-tree library to display the hierarchy, we need to do a minor hack here. Js-tree requires the &ldquo;data&rdquo; key and some meta info in the json data to display the content of the node in the view. With a handy recursive method, we acheieve this.</p>

<p>In the <em>models/categories.rb</em>, we do this</p>

<pre><code>class &lt;&lt; self
  def build_display_ancestry(category_hierarchy, tailored_hierarchy_data = [])
    category_hierarchy.each do |category_data|
      state = category_data['children'].empty? ? 'leaf' : 'open'
      custom_display_data = {
        :data =&gt; category_data['name'],
        :state =&gt; state,
        :metadata =&gt; { href: Rails.application.routes.url_helpers.category_path(category_data['id']) },
        :children =&gt;  build_display_ancestry(category_data['children'], [])
      }
      tailored_hierarchy_data &lt;&lt; custom_display_data
    end
    tailored_hierarchy_data
  end

  def viewed_ancestry
    build_display_ancestry(Category.arrange_serializable, [])
  end
end
</code></pre>

<p>The <em>categories_controller</em> would have a &lsquo;view_ancestry&rsquo; action for the js-tree method to fetch the data to be displayed,</p>

<pre><code>def view_ancestry
  render json: { data: 'Categories', state: 'open', metadata: { href: categories_path }, children: Category.viewed_ancestry }
end
</code></pre>

<p>Now, some javascript for fetching the info from the server and displaying the data on view,</p>

<pre><code>$(document).ready(function(){
$("#category-hierarchy").jstree({
    "json_data": {
        "ajax" : {
            "url" : $("#category-hierarchy").attr('data-path'),
            "data" : function (n) {
                return { id : n.attr ? n.attr("id") : 0 };
            }
        }
    },
    plugins : ["themes", "json_data", "ui"],
    themes : {"theme": "default", "icons":false, "dots": true, "open":true},
    core: {"animation": 100}
}).bind("select_node.jstree", function(e, data) {
        if (jQuery.data(data.rslt.obj[0], "href")) {
            window.location = jQuery.data(data.rslt.obj[0], "href");
        }
    })
});
</code></pre>

<p>Yes, you would need a &ldquo;#category-hierarchy&rdquo; div to display the data.</p>

<p>Once all done and set, you would get a pretty neat tree structure without much effort. Something that looks like this,</p>

<div>
 <img src = "/images/tree-hierarchy.png" alt = "Hierarchy">
</div>



]]></content>
  </entry>
  
</feed>
